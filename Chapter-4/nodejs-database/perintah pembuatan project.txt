 Berikut langkah-langkahnya untuk membuat sebuah database dummy dengan nama /db/post.json dan fungsi CRUD menggunakan Node.js dengan package File System:

1. Inisialisasi Proyek:
Pertama-tama, pastikan Anda memiliki Node.js diinstal di komputer Anda. Jika belum, Anda dapat mengunduh dan menginstalnya dari situs resmi Node.js.

2. Buat Folder Proyek:
Buat folder baru untuk proyek Anda di dalam direktori yang Anda inginkan. Misalnya, buat folder dengan nama "nodejs-database".

3. Inisialisasi Proyek Node.js:
Buka terminal atau command prompt, arahkan ke folder proyek yang baru dibuat, dan jalankan perintah berikut untuk menginisialisasi proyek Node.js:
npm init -y
msg : "Ini akan membuat file package.json yang akan digunakan untuk mengelola dependensi proyek Anda."

4. Instal Package File System:
Untuk mengelola file JSON, Anda perlu menginstal package fs-extra. Jalankan perintah berikut di terminal:
npm install fs-extra --save

5. Buat File Database Dummy:
Buat file JSON dengan nama post.json di dalam folder /db. Anda dapat membuatnya secara manual atau dengan menggunakan kode Node.js. Misalnya, dengan kode berikut:

// Buat folder /db jika belum ada
const fs = require('fs-extra');
const path = require('path');

const dbFolderPath = path.join(__dirname, 'db');
fs.ensureDirSync(dbFolderPath);

// Buat file post.json dengan data awal
const initialData = [];
const filePath = path.join(dbFolderPath, 'post.json');
fs.writeFileSync(filePath, JSON.stringify(initialData, null, 2));

6. Buat Fungsi CRUD:
Buat file JavaScript baru (misalnya, crud.js) di dalam folder proyek Anda untuk mengelola operasi CRUD pada database JSON. Berikut adalah contoh implementasi dasar CRUD:

const fs = require('fs-extra');
const path = require('path');

const dbFolderPath = path.join(__dirname, 'db');
const filePath = path.join(dbFolderPath, 'post.json');

// Read data dari database
function readData() {
  return fs.readJsonSync(filePath);
}

// Menambahkan data baru ke database
function createData(newData) {
  const data = readData();
  data.push(newData);
  fs.writeJsonSync(filePath, data, { spaces: 2 });
}

// Mendapatkan data dari database berdasarkan ID
function getDataById(id) {
  const data = readData();
  return data.find(item => item.id === id);
}

// Mengupdate data dalam database
function updateData(updatedData) {
  const data = readData();
  const index = data.findIndex(item => item.id === updatedData.id);
  if (index !== -1) {
    data[index] = updatedData;
    fs.writeJsonSync(filePath, data, { spaces: 2 });
  }
}

// Menghapus data dari database berdasarkan ID
function deleteData(id) {
  const data = readData();
  const newData = data.filter(item => item.id !== id);
  fs.writeJsonSync(filePath, newData, { spaces: 2 });
}

module.exports = {
  readData,
  createData,
  getDataById,
  updateData,
  deleteData,
};


7. Menggunakan Fungsi CRUD:
Di dalam file lain dalam proyek Anda, Anda dapat mengimpor fungsi CRUD dan menggunakannya untuk berinteraksi dengan database dummy ini. Misalnya:

const { createData, getDataById, updateData, deleteData } = require('./crud');

// Contoh penggunaan
createData({ id: 1, title: 'Contoh Posting 1', content: 'Ini adalah konten posting 1' });
const postData = getDataById(1);
console.log('Data Posting:', postData);
updateData({ id: 1, title: 'Posting yang Diperbarui', content: 'Konten telah diperbarui.' });
deleteData(1);

Anda dapat mengganti contoh data dan operasi CRUD sesuai dengan kebutuhan proyek Anda.

Dengan mengikuti langkah-langkah ini, Anda akan memiliki sebuah proyek Node.js yang menggunakan package File System untuk membuat dan mengelola database JSON sederhana. Pastikan Anda juga memahami keamanan dan manajemen kesalahan saat mengembangkan proyek yang lebih kompleks.
